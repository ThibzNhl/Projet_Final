name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python manage.py test

  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t todolist-app .

      - name: Tag Docker image
        run: |
          docker tag todolist-app:latest thibnahe/todolist-app:latest

      - name: Push Docker image to Docker Hub
        run: |
          docker push thibnahe/todolist-app:latest

      - name: Verify Docker image
        run: |
          docker images  # Pour s'assurer que l'image a été bien construite

      - name: Run Docker Container
        run: |
          # Exécutez le conteneur en arrière-plan
          docker run --rm -d -p 8000:8000 -v $(pwd)/db.sqlite3:/app/db.sqlite3 thibnahe/todolist-app:latest
          
          # Ajoutez un délai pour que le serveur démarre
          sleep 20

          # Testez si l'application est en ligne (vérifiez si le serveur répond sur le port 8000)
          curl --fail http://localhost:8000 || exit 1
